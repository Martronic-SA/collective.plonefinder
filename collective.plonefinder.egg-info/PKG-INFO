Metadata-Version: 1.0
Name: collective.plonefinder
Version: 1.0.0-alpha
Summary: A finder to search/select portal objects for Plone
Home-page: http://ingeniweb.com
Author: Ingeniweb
Author-email: support@ingeniweb.com
License: GPL
Description: .. contents::
        
        Ajax popup to reference plone contents.
        
        This code is an extraction of plonearticle explorer for referencables contents
        The intention is to make it usable for any content type in different situations :
        
        - for referencable fields with a special widget (collective.orderrefswidget which will come soon)
        
        - for collective.ploneckeditor (will also come soon) or any possible wysiwyg editor for referencing images or contents inside a rich text field,
        we also make possible in near future upload of files or images with this product (perhaps using collective.uploadify)
        
        - for links fields (as remoteUrl in ATLink) to reference internal links
        
        
        Don't use it in a production site for now (this product is under developpement just for a specific usecase)
        
        This work has been started by Christophe Bosse & Jean-mat Grimaldi in 2007.
        
        TODO :
        -----
        
        - js refactoring
        
        - css refactoring
        
        - uploadify integration
        
        - extended search form
        
        -
        
        
        .. Note!
        -----
        
        - Code repository: https://svn.plone.org/svn/collective/collective.plonefinder/trunk
        
        - Questions and comments to support@ingeniweb.com
        
        
        Change history
        **************
        
        Changelog
        =========
        
        1.0.0-alpha (xxxx-xx-xx)
        ------------------------
        
        - Created recipe with ZopeSkel
        [Ingeniweb]
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the
        documentation, though, is in the underlying zope.testbrower package.
        
        >>> from Products.Five.testbrowser import Browser
        >>> browser = Browser()
        >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
        >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
        >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
        >>> browser.url == portal_url
        True
        
        And we ensure that we get the friendly logged-in message:
        
        >>> "You are now logged in" in browser.contents
        True
        
        
        -*- extra stuff goes here -*-
        
        
        Contributors
        ************
        
        Ingeniweb, Author
        
        
        Download
        ********
        
Keywords: Zope Plone Medias Finder
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
